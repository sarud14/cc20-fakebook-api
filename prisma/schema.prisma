// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String?        @unique
  mobile       String?        @unique
  password     String
  profileImage String?
  coverImage   String?
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt @db.Timestamp(0)
  posts        Post[]
  comments     Comment[]
  Likes        Like[]
  senders      Relationship[] @relation(name: "sender")
  receivers    Relationship[] @relation(name: "receiver")
}

model Post {
  id       Int       @id @default(autoincrement())
  message  String?   @db.Text
  image    String?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt @db.Timestamp(0)
  User     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int?
  comments Comment[]
  Likes    Like[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  message  String?  @db.Text
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt @db.Timestamp(0)
  User     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int?
  Post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int?
}

model Like {
  userId    Int
  postId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Relationship {
  id         Int                @id @default(autoincrement())
  status     RelationshipStatus @default(PENDING)
  createAt   DateTime           @default(now())
  updateAt   DateTime           @updatedAt @db.Timestamp(0)
  senderId   Int
  receiverId Int
  sender     User?              @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?              @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  // @@map("relation_ship")
}

enum RelationshipStatus {
  PENDING
  ACCEPTED
}
